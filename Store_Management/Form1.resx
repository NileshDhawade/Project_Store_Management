<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/4QAuRXhpZgAATU0AKgAAAAgAAkAAAAMAAAABAIUAAEABAAEAAAAB
        AAAAAAAAAAD/2wBDAAoHBwkHBgoJCAkLCwoMDxkQDw4ODx4WFxIZJCAmJSMgIyIoLTkwKCo2KyIjMkQy
        Njs9QEBAJjBGS0U+Sjk/QD3/2wBDAQsLCw8NDx0QEB09KSMpPT09PT09PT09PT09PT09PT09PT09PT09
        PT09PT09PT09PT09PT09PT09PT09PT09PT3/wAARCAEKAdoDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEA
        AAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKB
        kaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlq
        c3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ
        2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
        AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcY
        GRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaX
        mJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oA
        DAMBAAIRAxEAPwDyyiiimIKWkooAWiiigAooooAdRRRQAUtJS0AFLSUtABS0lLQAUtJS0AFFFLQAUUUt
        ABRRRQAUtFFABRRRQAUU6igBtFFFABRRRQAlFLSUAFJS0UAJRRRQAlFFFACUUUUAJRRRQAlFFFACUUUU
        AFNp1NoAKKKKACiikoAKKKKACim06gBtOptOoAKKKKAFooooAKKKKAHUU2nUAFLSUtABS0lLQAtFFFAB
        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
        nljHc8mnUxMKSim0AFFFFABSUUUANoopKACiikoAKKKKACkoooAKSiigAooopgRUUUUhhRRRSAKKKKAC
        nU2igB1FFFAC0UUUAFLSUtABRRRQAtFFFAC0UUUALS0lFAC0UUUALRSUtABTqbRQA6im06gAoptFABRR
        RQAUlFFABSUtNJoAUmnRJ/GfwpEjMnJ4X+dTU0Ji0lFNoAKKKKACkoptABRRSUAFFFJQAUUUlABRRSUA
        LSUUUAFFFJQAtJRRQBDmjNS0UAR5ozUtFAEWaM1LS0WAhzS5qWiiwEWaM1NRRYCHNOzUmaWiwEWaM1Lm
        losFyHNLmpc0uaLBchzS5qXNLmiwXIc0uamyaM0WC5Duo3VYzS5osFyvvo31YzS5osFytvpd9WM0uT60
        WC5W30b6s5PrRn3osFytvo31ZyaM0WC5W3/WjfVnJ9aM+9FguVt9G+rOaM0WC5V30b/rVnNGT60WC5XC
        O/RSB6mnpEo5b5j/ACqTNGaLBcM02iigAoopuaAFoptFABRSUUAFJRRQAUlFFABRRSUAFFFFABRSUUAF
        FFJQAUUUUAFFJS0AFLSUUALRSUtABS0lFAC0UlLQAtFJRQA6ikooAWlpKKAFzS0lFAD6TNJRQA+ikooA
        WiiigB1GabRQA6lplFAD80ZplLmgB2aM03NJQA6jNNooAdTaKTNAC0UUlAC0lFNoAXNJRSUALSUUlAC0
        lFJQAtJRSUALSUUUAFFFJQAUUUUAFJRRQAUUUUAFFJRQAUUUUAFLSUUALRSUtABS0lFAC0UlLQAtFJRQ
        AtLSUUALRSUtAC0UmaKAFpaSigB1FNpaAFpc03NLQA6im0UAPoplGaAHZozSZozQA6im5ozQA6kptFAD
        qKbRQAUUmaKAFpKKSgBaSiigApKKKACikooAKKKSgBaSiigAopKKACiiigAoopKACiiigAooooAbRRRQ
        A6im06gAooooAWikooAWikpaAClpKKAFopKWgApaSigBaKKKAFopKKAHUUlFAC0UlFADs0UlFAC5ozSU
        UALmjNJRmgBc0ZpKKAFopKKAFopKSgBaKSigBaSikoAWikooAKKKSgBaSiigAopKKAFpKKKACiikoAWk
        oooAKKKKACim0UAFFFFABRRRQAUUUUAFFFFADqKbRQA6iiigApaSigBaKSloAKKKKAFopKKAFpaSigBa
        KSigBaKKKAFopKKAFopKKAFopKKAFopKKAFopKKAFpKKKACiikoAWikooAWkoooAKKSigAooooAKKSig
        AooooAKKKbQA6m0UUAFFFFABRRRQAUUUUAFFSXX/AB+Tf9dG/nUdABRRRQAUUUUAFFFFABRRRQA6iiig
        AooooAKWkooAWikpaACiiigApaSloAKKKSgBaKKKAClpKKAFopKKAFozSUUAFFFFABmiiigAoopKAFpK
        KKACiiigAopKKACiiigAooooAKbTqbQAUUUUAFFFFABRRRQAUUUUAFNp1dFa/wDHpD/uL/KgD//Z
</value>
  </data>
</root>